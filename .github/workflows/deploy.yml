name: Deploy WPG API to AWS Lambda

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install

      - name: Build code
        run: pnpm build:prod

      - name: Archive code
        run: cd dist && zip -r ../function.zip .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update Lambda Function Code
        run: |
          aws lambda update-function-code \
            --function-name ${{ vars.AWS_WPG_API_LAMBDA_NAME }} \
            --zip-file fileb://function.zip

          echo "Waiting for Lambda function update to complete..."
          aws lambda wait function-updated --function-name ${{ vars.AWS_WPG_API_LAMBDA_NAME }}

      - name: Update Lambda Configuration for Environment Variables
        run: |
          JSON_ENV=$(cat <<EOF
          {
            "Variables": {
              "START_AS_HTTP": "false",
              "API_PREFIX": "${{vars.API_PREFIX}}",
              "AIRTABLE_BASE_ID": "${{secrets.AIRTABLE_BASE_ID}}",
              "AIRTABLE_API_KEY": "${{secrets.AIRTABLE_API_KEY}}",
              "OPENAI_API_KEY": "${{secrets.OPENAI_API_KEY}}",
              "ADMIN_WEBFLOW_CMS_API_KEY": "${{secrets.ADMIN_WEBFLOW_CMS_API_KEY}}",
              "WEBFLOW_CMS_API_KEY": "${{secrets.WEBFLOW_CMS_API_KEY}}",
              "WEBFLOW_COLLECTION_ID": "${{secrets.WEBFLOW_COLLECTION_ID}}"
            }
          }
          EOF
          )

          aws lambda update-function-configuration \
            --function-name ${{ vars.AWS_WPG_API_LAMBDA_NAME }} \
            --environment "$JSON_ENV"
